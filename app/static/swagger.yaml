swagger: "2.0"
info:
  title: Bootopia API
  description: A social network for reading and sharing books.
  version: "1.0"
basePath: /api/v1.0
schemes:
  - http
tags:
  - name: Auth
    description: User Authentication
  - name: Users
    description: User Management
  - name: Books
    description: CRUD for books
  - name: Posts
    description: CRUD for posts
  - name: Comments
    description: CRUD for comments on posts
  - name: Likes
    description: CRUD for likes on posts
  - name: Summary
    description: CRUD for book summaries
  - name: Quotes
    description: CRUD for quotes from books
  - name: Tags
    description: CRUD for tags associated with books
  - name: Recommendations
    description: User recommendations for books
  - name: Notifications
    description: User notifications for activities
  - name: Bookmarks
    description: User bookmarks for books
  

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: "JWT Authorization header using the Bearer scheme. Example: 'Bearer {token}'"

security:
  - Bearer: []

paths:
  # Authentication and User Management
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      parameters:
        - in: body
          name: user
          description: The user to register
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: User registered successfully
        400:
          description: Invalid input
        500:
          description: Internal server error
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login a user
      parameters:
        - in: body
          name: user
          description: The user to login
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: User logged in successfully
          schema:
            type: object
            properties:
              token:
                type: string
        401:
          description: Unauthorized
        500:
          description: Internal server error
        400:
          description: Invalid input
  /auth/me:
    get:
      tags:
        - Auth
      summary: Get current user information
      responses:
        200:
          description: User information retrieved successfully
          schema:
            $ref: "#/definitions/User"
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /auth/reset-password-request:
    post:
      tags:
        - Auth
      summary: Request a password reset
      parameters:
        - in: body
          name: email
          description: The email of the user requesting a password reset
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
      responses:
        200:
          description: Password reset request successful
        400:
          description: Invalid email address
        500:
          description: Internal server error
  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset a user's password
      parameters:
        - in: body
          name: reset_info
          description: The information required to reset the password
          required: true
          schema:
            type: object
            properties:
              token:
                type: string
              new_password:
                type: string
      responses:
        200:
          description: Password reset successful
        400:
          description: Invalid input or token
        500:
          description: Internal server error
  /auth/token/refresh:
    post:
      tags:
        - Auth
      summary: Refresh user authentication token
      parameters:
        - in: body
          name: refresh_token
          description: The refresh token to use
          required: true
          schema:
            type: object
            properties:
              refresh_token:
                type: string
      responses:
        200:
          description: Token refreshed successfully
          schema:
            type: object
            properties:
              token:
                type: string
        401:
          description: Unauthorized
        500:
          description: Internal server error
  # CRUD operations for books
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      responses:
        200:
          description: A list of books
          schema:
            type: array
            items:
              $ref: "#/definitions/Book"
  /books/new:
    post:
      tags:
        - Books
      summary: Create a new book
      parameters:
        - in: body
          name: book
          description: The book to create
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        201:
          description: Book created successfully
        400:
          description: Invalid input
        500:
          description: Internal server error
  /books/get/{id}:
    get:
      tags:
        - Books
      summary: Get a book by ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: The ID of the book to retrieve
      responses:
        200:
          description: A book object
          schema:
            $ref: "#/definitions/Book"
        404:
          description: Book not found
        500:
          description: Internal server error
  /books/update/{id}:
    put:
      tags:
        - Books
      summary: Update a book by ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: The ID of the book to update
        - in: body
          name: book
          description: The updated book object
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        200:
          description: Book updated successfully
        400:
          description: Invalid input
        404:
          description: Book not found
        500:
          description: Internal server error
  /books/delete/{id}:
    delete:
      tags:
        - Books
      summary: Delete a book by ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: The ID of the book to delete
      responses:
        204:
          description: Book deleted successfully
        404:
          description: Book not found
        500:
          description: Internal server error
  /books/search:
    get:
      tags:
        - Books
      summary: Search for books based on author or book title
      parameters:
        - in: query
          name: query
          required: true
          type: string
          description: The search term to use
      responses:
        200:
          description: A list of books matching the search term
          schema:
            type: array
            items:
              $ref: "#/definitions/Book"
        400:
          description: Invalid search term
        500:
          description: Internal server error
  # user management
  /users/{id}/follow:
    post:
      tags:
        - Users
      summary: Follow a user
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The ID of the user to follow
      responses:
        200:
          description: User followed successfully
        404:
          description: User not found
        500:
          description: Internal server error
  /users/{id}/unfollow:
    post:
      tags:
        - Users
      summary: Unfollow a user
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The ID of the user to unfollow
      responses:
        200:
          description: User unfollowed successfully
        404:
          description: User not found
        500:
          description: Internal server error
  /users/{id}/followers:
    get:
      tags:
        - Users
      summary: Get followers of a user
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The ID of the user whose followers to retrieve
      responses:
        200:
          description: A list of followers
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        404:
          description: User not found
        500:
          description: Internal server error
  /users/{id}/following:
    get:
      tags:
        - Users
      summary: Get users that a user is following
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The ID of the user whose following list to retrieve
      responses:
        200:
          description: A list of users that the user is following
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        404:
          description: User not found
        500:
          description: Internal server error
  /users/{id}/profile:
    get:
      tags:
        - Users
      summary: Get user profile by ID
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The ID of the user to retrieve the profile for
      responses:
        200:
          description: User profile retrieved successfully
          schema:
            $ref: "#/definitions/User"
        404:
          description: User not found
        500:
          description: Internal server error
  # Posts
  /posts:
    get:
      tags:
        - Posts
      summary: Get all posts
      responses:
        200:
          description: A list of posts
          schema:
            type: array
            items:
              $ref: "#/definitions/Post"
  /posts/new:
    post:
      tags:
        - Posts
      summary: Create a new post
      parameters:
        - in: body
          name: post
          description: The post to create
          required: true
          schema:
            $ref: "#/definitions/Post"
      responses:
        201:
          description: Post created successfully
        400:
          description: Invalid input
        500:
          description: Internal server error
  /posts/get/{id}:
    get:
      tags:
        - Posts
      summary: Get a post by ID
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The ID of the post to retrieve
      responses:
        200:
          description: A post object
          schema:
            $ref: "#/definitions/Post"
        404:
          description: Post not found
        500:
          description: Internal server error
  /posts/update/{id}:
    put:
      tags:
        - Posts
      summary: Update a post by ID
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The ID of the post to update
        - in: body
          name: post
          description: The updated post object
          required: true
          schema:
            $ref: "#/definitions/Post"
      responses:
        200:
          description: Post updated successfully
        400:
          description: Invalid input
        404:
          description: Post not found
        500:
          description: Internal server error
  /posts/delete/{id}:
    delete:
      tags:
        - Posts
      summary: Delete a post by ID
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The ID of the post to delete
      responses:
        204:
          description: Post deleted successfully
        404:
          description: Post not found
        500:
          description: Internal server error
  /posts/user/{user_id}:
    get:
      tags:
        - Posts
      summary: Get all posts by a specific user
      parameters:
        - in: path
          name: user_id
          required: true
          type: integer
          description: The ID of the user whose posts to retrieve
      responses:
        200:
          description: A list of posts by the user
          schema:
            type: array
            items:
              $ref: "#/definitions/Post"
        404:
          description: User not found or no posts available
        500:
          description: Internal server error
  # Comments
  /comments/post/{post_id}:
    get:
      tags:
        - Comments
      summary: Get comments for a specific post
      parameters:
        - in: path
          name: post_id
          required: true
          type: integer
          description: The ID of the post to retrieve comments for
      responses:
        200:
          description: A list of comments for the post
          schema:
            type: array
            items:
              $ref: "#/definitions/Comment"
        404:
          description: Post not found or no comments available
        500:
          description: Internal server error
  /comments/{post_id}/new:
    post:
      tags:
        - Comments
      summary: Add a new comment to a specific post
      parameters:
        - in: path
          name: post_id
          required: true
          type: integer
          description: The ID of the post to add a comment to
        - in: body
          name: comment
          description: The comment to add
          required: true
          schema:
            $ref: "#/definitions/Comment"
      responses:
        201:
          description: Comment added successfully
        400:
          description: Invalid input
        404:
          description: Post not found
        500:
          description: Internal server error
  /comments/{comment_id}/delete:
    delete:
      tags:
        - Comments
      summary: Delete a comment by ID
      parameters:
        - in: path
          name: comment_id
          required: true
          type: integer
          description: The ID of the comment to delete
      responses:
        204:
          description: Comment deleted successfully
        404:
          description: Comment not found
        500:
          description: Internal server error
  # Likes
  /likes/{post_id}/like:
    post:
      tags:
        - Likes
      summary: Like and unlike a post.
      description: This endpoint toggles the like status of a post. If the user has already liked the post, it will remove the like; otherwise, it will add a like.
      parameters:
        - in: path
          name: post_id
          required: true
          type: integer
          description: The ID of the post to like
      responses:
        200:
          description: Post liked successfully
        404:
          description: Post not found
        500:
          description: Internal server error
  # Feed
  /feed:
    get:
      tags:
        - Posts
      summary: Get the user's feed
      description: Retrieve a list of posts from users that the current user is following.
      responses:
        200:
          description: A list of posts in the user's feed
          schema:
            type: array
            items:
              $ref: "#/definitions/Post"
        401:
          description: Unauthorized
        500:
          description: Internal server error
  # Notifications
  /notifications:
    get:
      tags:
        - Notifications
      summary: Get all notifications for the current user
      responses:
        200:
          description: A list of notifications
          schema:
            type: array
            items:
              $ref: "#/definitions/Notification"
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /notifications/mark-read:
    post:
      tags:
        - Notifications
      summary: Mark all notifications as read
      responses:
        200:
          description: All notifications marked as read successfully
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /notifications/{notification_id}/read:
    get:
      tags:
        - Notifications
      summary: Mark a specific notification as read
      parameters:
        - in: path
          name: notification_id
          required: true
          type: integer
          description: The ID of the notification to mark as read
      responses:
        200:
          description: Notification marked as read successfully
        404:
          description: Notification not found
        500:
          description: Internal server error
  /notifications/{notification_id}/delete:
    delete:
      tags:
        - Notifications
      summary: Delete a specific notification
      parameters:
        - in: path
          name: notification_id
          required: true
          type: integer
          description: The ID of the notification to delete
      responses:
        204:
          description: Notification deleted successfully
        404:
          description: Notification not found
        500:
          description: Internal server error
  # Summaries
  /summaries:
    get:
      tags:
        - Summary
      summary: Get all book summaries
      responses:
        200:
          description: A list of book summaries
          schema:
            type: array
            items:
              $ref: "#/definitions/Summary"
  /summaries/book/{book_id}/summarize:
    post:
      tags:
        - Summary
      summary: Summaries a book
      description: Create a summary for a specific book.
      parameters:
        - in: path
          name: book_id
          required: true
          type: integer
          description: The ID of the book to create the summary for
      responses:
        200:
          description: A book summary object
          schema:
            $ref: "#/definitions/Summary"
        404:
          description: Book not found
        500:
          description: Internal server error
  /summaries/summary/{summary_id}:
    get:
      tags:
        - Summary
      summary: Get a specific book summary by ID
      parameters:
        - in: path
          name: summary_id
          required: true
          type: integer
          description: The ID of the summary to retrieve
      responses:
        200:
          description: A book summary object
          schema:
            $ref: "#/definitions/Summary"
        404:
          description: Summary not found
        500:
          description: Internal server error
  /summaries/summary/{summary_id}/delete:
    delete:
      tags:
        - Summary
      summary: Delete a specific book summary by ID
      parameters:
        - in: path
          name: summary_id
          required: true
          type: integer
          description: The ID of the summary to delete
      responses:
        204:
          description: Summary deleted successfully
        404:
          description: Summary not found
        500:
          description: Internal server error
  /summaries/book/{book_id}/all:
    get:
      tags:
        - Summary
      summary: Get all summaries for a specific book
      parameters:
        - in: path
          name: book_id
          required: true
          type: integer
          description: The ID of the book to retrieve summaries for
      responses:
        200:
          description: A list of summaries for the book
          schema:
            type: array
            items:
              $ref: "#/definitions/Summary"
        404:
          description: Book not found or no summaries available
        500:
          description: Internal server error
  # Recommendations
  /recommendations:
    get:
      tags:
        - Recommendations
      summary: Get book recommendations for the current user
      responses:
        200:
          description: A list of recommended books
          schema:
            type: array
            items:
              $ref: "#/definitions/UserRecommendation"
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /recommendations/mood_id:
    get:
      tags:
        - Recommendations
      summary: Get book recommendations based on mood
      parameters:
        - in: query
          name: mood_id
          required: true
          type: integer
          description: The ID of the mood to filter recommendations by
      responses:
        200:
          description: A list of recommended books based on mood
          schema:
            type: array
            items:
              $ref: "#/definitions/UserRecommendation"
        400:
          description: Invalid mood ID
        500:
          description: Internal server error
  /recommendations/clear:
    delete:
      tags:
        - Recommendations
      summary: Clear all user recommendations
      responses:
        204:
          description: User recommendations cleared successfully
        500:
          description: Internal server error
  /recommendations/<int:book_id>/delete:
    delete:
      tags:
        - Recommendations
      summary: Delete a specific book recommendation by book ID
      parameters:
        - in: path
          name: book_id
          required: true
          type: integer
          description: The ID of the book recommendation to delete
      responses:
        204:
          description: Book recommendation deleted successfully
        404:
          description: Book recommendation not found
        500:
          description: Internal server error
  # Quotes
  /quotes/book/{book_id}:
    get:
      tags:
        - Quotes
      summary: Get all quotes for a specific book
      parameters:
        - in: path
          name: book_id
          required: true
          type: integer
          description: The ID of the book to retrieve quotes for
      responses:
        200:
          description: A list of quotes for the book
          schema:
            type: array
            items:
              $ref: "#/definitions/Quote"
        404:
          description: Book not found or no quotes available
        500:
          description: Internal server error
  /quotes/user:
    get:
      tags:
        - Quotes
      summary: Get all user quotes
      responses:
        200:
          description: A list of all user quotes
          schema:
            type: array
            items:
              $ref: "#/definitions/Quote"
        404:
          description: No quotes found
        500:
          description: Internal server error
  /quotes/book/{book_id}/new:
    post:
      tags:
        - Quotes
      summary: Create a new quote for a specific book
      parameters:
        - in: path
          name: book_id
          required: true
          type: integer
          description: The ID of the book to create a quote for
        - in: body
          name: quote
          required: true
          schema:
            $ref: "#/definitions/Quote"
      responses:
        201:
          description: Quote created successfully
        400:
          description: Invalid request
        404:
          description: Book not found
        500:
          description: Internal server error
  /quotes/quote/{quote_id}:
    get:
      tags:
        - Quotes
      summary: Get a specific quote by ID
      parameters:
        - in: path
          name: quote_id
          required: true
          type: integer
          description: The ID of the quote to retrieve
      responses:
        200:
          description: A quote object
          schema:
            $ref: "#/definitions/Quote"
        404:
          description: Quote not found
        500:
          description: Internal server error
  /quotes/quote/{quote_id}/delete:
    delete:
      tags:
        - Quotes
      summary: Delete a specific quote by ID
      parameters:
        - in: path
          name: quote_id
          required: true
          type: integer
          description: The ID of the quote to delete
      responses:
        204:
          description: Quote deleted successfully
        404:
          description: Quote not found
        500:
          description: Internal server error
  # Tags
  /tags:
    get:
      tags:
        - Tags
      summary: Get all tags
      responses:
        200:
          description: A list of tags
          schema:
            type: array
            items:
              $ref: "#/definitions/Tag"
  /tags/delete/{tag_id}:
    delete:
      tags:
        - Tags
      summary: Delete a specific tag by ID
      parameters:
        - in: path
          name: tag_id
          required: true
          type: integer
          description: The ID of the tag to delete
      responses:
        204:
          description: Tag deleted successfully
        404:
          description: Tag not found
        500:
          description: Internal server error
  /tags/books/{tag_id}:
    get:
      tags:
        - Tags
      summary: Get all books associated with a specific tag
      parameters:
        - in: path
          name: tag_id
          required: true
          type: integer
          description: The ID of the tag to retrieve books for
      responses:
        200:
          description: A list of books associated with the tag
          schema:
            type: array
            items:
              $ref: "#/definitions/Book"
        404:
          description: Tag not found or no books available
        500:
          description: Internal server error
  /tags/book_tag/{book_id}/{tag_id}:
    post:
      tags:
        - Tags
      summary: Associate a book with a tag
      parameters:
        - in: path
          name: book_id
          required: true
          type: integer
          description: The ID of the book to associate with the tag
        - in: path
          name: tag_id
          required: true
          type: integer
          description: The ID of the tag to associate with the book
      responses:
        201:
          description: Book associated with tag successfully
        400:
          description: Invalid input
        404:
          description: Book or tag not found
        500:
          description: Internal server error
  # Bookmarks/user books
  /bookmarks:
    get:
      tags:
        - Bookmarks
      summary: Get all user books
      responses:
        200:
          description: A list of user books
          schema:
            type: array
            items:
              $ref: "#/definitions/UserBook"
  /bookmarks/add/{book_id}:
    post:
      tags:
        - Bookmarks
      summary: Add a book to user bookmarks
      parameters:
        - in: path
          name: book_id
          required: true
          type: integer
          description: The ID of the book to add to bookmarks
      responses:
        201:
          description: Book added to bookmarks successfully
        400:
          description: Invalid input
        404:
          description: Book not found
        500:
          description: Internal server error
  /bookmarks/{bookmark_id}/remove:
    delete:
      tags:
        - Bookmarks
      summary: Remove a book from user bookmarks
      parameters:
        - in: path
          name: bookmark_id
          required: true
          type: integer
          description: The ID of the bookmark to remove
      responses:
        204:
          description: Bookmark removed successfully
        404:
          description: Bookmark not found
        500:
          description: Internal server error
  /bookmarks/clear:
    delete:
      tags:
        - Bookmarks
      summary: Clear all user bookmarks
      responses:
        204:
          description: All user bookmarks cleared successfully
        500:
          description: Internal server error
definitions:
  Book:
    type: object
    required:
      - title
      - author
      - description
      - cover_image_url
      - file_url
      - year_published
      - isbn
      - user_id
    properties:
      title:
        type: string
      author:
        type: string
      description:
        type: string
      cover_image_url:
        type: string
      file_url:
        type: string
      year_published:
        type: integer
      isbn:
        type: string
      user_id:
        type: integer
  User:
    type: object
    required:
      - email
      - username
      - password
      - profile_picture_url
      - bio
    properties:
      email:
        type: string
      username:
        type: string
      password:
        type: string
      profile_picture_url:
        type: string
      bio:
        type: string
  UserBook:
    type: object
    required:
      - user_id
      - book_id
      - status
      - personal_note
    properties:
      user_id:
        type: integer
      book_id:
        type: integer
      status:
        type: string
        enum: [reading, completed, want_to_read]
      personal_note:
        type: string
  Post:
    type: object
    required:
      - user_id
      - book_id
      - title
      - post_image_url
      - content
      - timestamp
    properties:
      user_id:
        type: integer
      book_id:
        type: integer
      title:
        type: string
      post_image_url:
        type: string
      content:
        type: string
  Comment:
    type: object
    required:
      - user_id
      - post_id
      - content
    properties:
      user_id:
        type: integer
      post_id:
        type: integer
      content:
        type: string
  Like:
    type: object
    required:
      - user_id
      - post_id
    properties:
      user_id:
        type: integer
      post_id:
        type: integer
  Follower:
    type: object
    required:
      - follower_id
      - followed_id
    properties:
      follower_id:
        type: integer
      followed_id:
        type: integer
  Notification:
    type: object
    required:
      - user_id
      - is_read
      - message
    properties:
      user_id:
        type: integer
      message:
        type: string
      is_read:
        type: boolean
  Summary:
    type: object
    required:
      - book_id
      - summary_text
      - user_id
    properties:
      book_id:
        type: integer
      summary_text:
        type: string
      user_id:
        type: integer
  Quote:
    type: object
    required:
      - book_id
      - quote
      - user_id
    properties:
      book_id:
        type: integer
      quote:
        type: string
      user_id:
        type: integer
  Tag:
    type: object
    required:
      - name
    properties:
      name:
        type: string
  BookTag:
    type: object
    required:
      - book_id
      - tag_id
    properties:
      book_id:
        type: integer
      tag_id:
        type: integer
  Mood:
    type: object
    required:
      - name
    properties:
      name:
        type: string
  BookMood:
    type: object
    required:
      - book_id
      - mood_id
    properties:
      book_id:
        type: integer
      mood_id:
        type: integer
  UserMood:
    type: object
    required:
      - user_id
      - mood_id
    properties:
      user_id:
        type: integer
      mood_id:
        type: integer
  PostMood:
    type: object
    required:
      - post_id
      - mood_id
    properties:
      post_id:
        type: integer
      mood_id:
        type: integer
  UserRecommendation:
    type: object
    required:
      - user_id
      - book_id
    properties:
      user_id:
        type: integer
      book_id:
        type: integer
